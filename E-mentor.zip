StudyMentor — Ready-to-upload Android Project

What this is: a complete, minimal Android app project (Kotlin + Jetpack Compose) you can copy into a folder, zip, and upload to GitHub. After you push it, use the provided GitHub Actions workflow to auto-build an APK (no PC required for building).


---

What to do next (quick):

1. Open this canvas document and copy the entire contents into files following the paths below.


2. Create a folder StudyMentor/ on your phone (or PC) and reproduce the file tree and files exactly.


3. Zip the StudyMentor/ folder into StudyMentor.zip and upload it to GitHub repository (create a new repo and "Upload files").


4. Add the workflow file in .github/workflows/android-build.yml (it is included below). Push and wait for Actions to finish. Download APK from Actions > Artifacts.




---

Project structure (create these files and folders)

StudyMentor/
  app/
    src/main/
      AndroidManifest.xml
      java/com/studymentor/
        MainActivity.kt
        MentorScheduler.kt
        NotificationHelper.kt
      res/values/strings.xml
      res/values/themes.xml
      res/mipmap/ic_launcher.png      (use default)
    build.gradle.kts
  build.gradle.kts
  settings.gradle.kts
  gradle.properties
  README.md
  .gitignore
  .github/workflows/android-build.yml


---

settings.gradle.kts

pluginManagement {
    repositories { gradlePluginPortal(); google(); mavenCentral() }
}
dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS); repositories { google(); mavenCentral() } }
rootProject.name = "StudyMentor"
include(":app")

build.gradle.kts (root)

plugins { id("com.android.application") version "8.6.0" apply false; id("org.jetbrains.kotlin.android") version "2.0.20" apply false }

gradle.properties

org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
android.nonTransitiveRClass=true
kotlin.code.style=official

app/build.gradle.kts

plugins { id("com.android.application"); id("org.jetbrains.kotlin.android") }

android {
    namespace = "com.studymentor.app"
    compileSdk = 34
    defaultConfig {
        applicationId = "com.studymentor.app"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
    }
    buildFeatures { compose = true }
    composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }
}

dependencies {
    val bom = platform("androidx.compose:compose-bom:2024.09.02")
    implementation(bom)
    androidTestImplementation(bom)
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.activity:activity-compose:1.9.2")
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.material3:material3:1.3.0")
}


---

app/src/main/AndroidManifest.xml

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.studymentor.app">

    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />

    <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:icon="@mipmap/ic_launcher"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:theme="@style/Theme.StudyMentor">

        <activity android:name=".MainActivity" android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>


---

app/src/main/java/com/studymentor/MainActivity.kt

package com.studymentor

import android.Manifest
import android.os.Build
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.studymentor.ui.theme.StudyMentorTheme
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        if (Build.VERSION.SDK_INT >= 33) {
            val req = registerForActivityResult(ActivityResultContracts.RequestPermission()) {}
            req.launch(Manifest.permission.POST_NOTIFICATIONS)
        }
        setContent { StudyMentorApp() }
    }
}

@Composable
fun StudyMentorApp() {
    StudyMentorTheme {
        Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) {
            MentorScreen()
        }
    }
}

@Composable
fun MentorScreen() {
    val scope = rememberCoroutineScope()
    var lastMessage by remember { mutableStateOf("Welcome, Ansh! Ask: 'Ab kya karu?'") }

    Column(Modifier.padding(16.dp)) {
        Text("StudyMentor", style = MaterialTheme.typography.headlineMedium)
        Spacer(Modifier.height(12.dp))
        Text(lastMessage)
        Spacer(Modifier.height(12.dp))
        Row {
            Button(onClick = { lastMessage = suggestNow() }) { Text("Ab kya karu?") }
            Spacer(Modifier.width(8.dp))
            Button(onClick = { lastMessage = fullPlan() }) { Text("Din ka plan dikhao") }
        }
        Spacer(Modifier.height(12.dp))
        Button(onClick = {
            scope.launch {
                lastMessage = "Starting a 50-min Pomodoro. Focus!"
                // simple fake countdown (no service)
                delay(1000L)
                lastMessage = "Pomodoro running..."
            }
        }) { Text("Start Pomodoro") }
    }
}

fun suggestNow(): String {
    // Simple logic based on the fixed timetable (library 10-4)
    // This returns a short mentor-style suggestion.
    val nowHour = java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY)
    return when (nowHour) {
        in 10..10 -> "10–11: Class 11 subject — Start with main subject for today (Physics)."
        in 11..11 -> "11–11:50: Watch Khan Sir batch video and take notes."
        in 12..13 -> "12:30–14:00: IERT session — deep practice, solve problems."
        in 14..14 -> "14:00–14:40: Python basics (or Computer Basics)."
        in 15..15 -> "15:00–15:40: Watch coding/self-improvement videos + take quick notes."
        in 15..16 -> "15:40–16:00: Prompt engineering / review."
        else -> "Library hours are 10–16. Follow the timetable. If outside library time, do quick revision or rest."
    }
}

fun fullPlan(): String {
    return "10:00–11:00 Class11 (rotate P/C/M)\n11:00–11:50 Khan Sir\n12:30–14:00 IERT\n14:00–14:40 Python/CS\n15:00–15:40 Videos (coding/self-improvement)\n15:40–16:00 Prompt engineering / Review"
}


---

app/src/main/res/values/strings.xml

<resources>
    <string name="app_name">StudyMentor - Ansh</string>
</resources>


---

app/src/main/res/values/themes.xml

<resources>
    <style name="Theme.StudyMentor" parent="Theme.Material3.Light.NoActionBar" />
</resources>


---

README.md

StudyMentor - simple mentor app

How to use:
1. Upload this project to GitHub (create a new repo).
2. Add the workflow file .github/workflows/android-build.yml (below) and push.
3. Visit Actions tab to wait for the APK build and download artifact.


---

.gitignore

.gradle/
/local.properties
/.idea/
/build/
/captures/
.gradle/
app/build/


---

.github/workflows/android-build.yml

name: Build Android APK
on:
  push:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Grant gradlew execute
        run: chmod +x ./gradlew
      - name: Build
        run: ./gradlew assembleDebug --no-daemon
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: studymentor-apk
          path: app/build/outputs/apk/debug/app-debug.apk


---

Final notes

This project is intentionally minimal and easy to edit from phone text editors. If you want more advanced features (notifications scheduling, foreground Pomodoro service, datastore persistence), I can provide additional files and code snippets to paste into the project.

After you upload and get the APK, install it on your Oppo A12 and try the buttons: "Ab kya karu?" and "Din ka plan dikhao" to see the mentor responses.


Good — copy these files into the exact folder layout, zip it, and upload to GitHub. Then open the GitHub Actions tab to download the built APK. If you want, I can next provide the exact step-by-step screenshots or short text commands to create the repo and upload from your phone browser.

